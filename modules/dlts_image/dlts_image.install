<?php
// $Id$: dlts_image.install

/**
 * @file
 * dlts_image module install functions
 */
 
/*
 * Require files
 */
module_load_include('inc', 'dlts_image', 'dlts_image.file');

/**
 * Implements hook_field_schema().
 */
function dlts_image_field_schema($field) {
  return array(
      'columns' => array(
        'fid' => array(
          'description' => 'The {file_managed}.fid being referenced in this field.',
          'type' => 'int',
          'not null' => FALSE,
          'unsigned' => TRUE,
        ),
        'djakota_width' => array(
          'description' => 'The width of the image in pixels.',
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'djakota_height' => array(
          'description' => 'The height of the image in pixels.',
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'djakota_levels' => array(
          'description' => 'Djatoka Jpeg 2000 Image Server levels values of the image.',
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'djakota_dwtLevels' => array(
          'description' => 'Djatoka Jpeg 2000 Image Server dwtLevels values of the image.',
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'djakota_compositingLayerCount' => array(
          'description' => 'Djatoka Jpeg 2000 Image Server compositing layer count of the image.',
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'width' => array(
          'description' => 'The width of the image in pixels.',
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'height' => array(
          'description' => 'The height of the image in pixels.',
          'type' => 'int',
          'unsigned' => TRUE,
        ),
      ),
      'indexes' => array(
        'fid' => array('fid'),
      ),
      'foreign keys' => array(
        'fid' => array(
          'table' => 'file_managed',
          'columns' => array('fid' => 'fid'),
        ),
      ),
    );
}

/**
 * Implementation of hook_requirements().
 */
function dlts_image_requirements($phase) {
  $requirements = array();
  $t = get_t();

  switch ($phase) {
    case 'install' :
      break;
      
    case 'runtime':
    
      if (image_get_toolkit() == 'imagemagick') {
        $requirements['dlts_image_imagemagick'] = array(
          'title' => $t('DLTS Image Toolkit'),
          'value' => $t('ImageMagick toolkit selected.'),
          'severity' => REQUIREMENT_OK,
        );
      }
      else if (!in_array('imagemagick', array_keys(image_get_available_toolkits()))) {
        $requirements['dlts_image_imagemagick'] = array(
          'title' => $t('DLTS Image Toolkit'),
          'value' => $t('Imagemagick image toolkit not available.'),
          'severity' => REQUIREMENT_ERROR,
          'description' => $t('DLTS Image requires the ImageMagick toolkit. Please make sure that the '. l('ImageMagick module', 'http://drupal.org/project/imagemagick' .' is installed')),
        );
      }
      else {
        $requirements['dlts_image_imagemagick'] = array(
          'title' => $t('DLTS Image Toolkit'),
          'value' => $t('ImageMagick toolkit not selected.'),
          'severity' => REQUIREMENT_ERROR,
          'description' => $t('DLTS Image requires ImageMagick to be the selected toolkit. Please select ImageMagick on the '. l('Image toolkit configuration page', 'admin/config/media/image-toolkit')),
        );
      }

      /*
       * ImageMagick must be compiled with JP2 support.
       */
      $source_file = drupal_get_path('module', 'dlts_image') . '/img/imagemagick_jp2_test.jp2';
      $destination_file = variable_get('file_public_path', conf_path() . '/files/') .'/dlts_image_thumbs/imagemagick_jp2_test.jpg';
      
      if (dlts_image_file_test_imagemagick($source_file, $destination_file) ) {
        $requirements['dlts_image_imagemagick_jp2'] = array(
          'title' => $t('DLTS Image JP2 Support'),
          'value' => $t('ImageMagick can convert JP2 files.'),
          'severity' => REQUIREMENT_OK,
        );
      }
      else {
        $requirements['dlts_image_imagemagick_jp2'] = array(
          'title' => $t('DLTS Image JP2 Support'),
          'value' => $t('ImageMagick cannot convert JP2 files.'),
          'severity' => REQUIREMENT_ERROR,
          'description' => $t('DLTS Image requires ImageMagick compiled with TIFF and JP2 support. If ImageMagick was compiled with JP2 support, please check the ImageMagic convert binary'),
        );
      }
  }
  return $requirements;
}

/**
 * Implementation of hook_enable().
 */
 
function dlts_image_enable() {
  $source_file = drupal_get_path('module', 'dlts_image') . '/img/imagemagick_jp2_test.jp2';
  $destination_file = variable_get('file_public_path', conf_path() . '/files/') .'dlts_image_thumbs/imagemagick_jp2_test.jpg';
  
  if (image_get_toolkit() != 'imagemagick') {
    
    drupal_set_message( 
      t('DLTS Image requires ImageMagick to be the selected image toolkit. Will try to select it for you'),
      'warning'
    );
    
    if ( module_exists('imagemagick') ) {
    
      /*
       * ImageMagick defaults
       * admin/config/media/image-toolkit
       */
   
      /** Set ImageMagick as the default image processing toolkit */
      variable_set('image_toolkit', 'imagemagick');

      drupal_set_message(
        t('ImageMagick was selected as the default image processing toolkit.'),
        'warning'
      );
      
      watchdog('books_profile', 'ImageMagick was selected as the default image processing toolkit.');   

      /** Path to the "convert" binary */
      variable_set('imagemagick_convert', 'convert');
      
      drupal_set_message(
        t('ImageMagick path to the "convert" binary was set to: convert'),
        'warning'
      );
      
      watchdog('books_profile', 'ImageMagick path to the "convert" binary was set to: convert');

      /** Image quality */
      variable_set('imagemagick_quality', '75');  

      /** Display debugging information */
      variable_set('imagemagick_debug', 0);
    
      drupal_set_message(
        t('DLTS Image was able to select ImageMagick as the default image toolkit.'),
        'warning'
      );
      
      watchdog('books_profile', 'ImageMagick has been properly set-up');
  
    }

    else {
      drupal_set_message(
        t('Unable to be the select ImageMagick as the default image toolkit. Please select ImageMagick on the '. l('Image toolkit configuration page', 'admin/config/media/image-toolkit')),
        'warning'
      );
    }
  }

  else if (!dlts_image_file_test_imagemagick($source_file, $destination_file)) {
    drupal_set_message(
      t('DLTS Image was unable to create a test image. Please verify that the ' . l('ImageMagick toolkit', 'admin/config/media/image-toolkit') . ' is properly configured.'),
      'warning'
    );
  }
  
  variable_set('dlts_image_djatoka_service_host', 'http://dl-img.home.nyu.edu/adore-djatoka');
  variable_set('dlts_image_djatoka_service', 'http://dl-img.home.nyu.edu/adore-djatoka');
  variable_set('dlts_image_djatoka_metadataurl', 'http://dl-img.home.nyu.edu/adore-djatoka?');
  variable_set('dlts_image_openlayers',  
    serialize ( array( 
      'plugins' => array( 
        'openurl' => array(
          'openurlResolver' => 'Z39.88-2004',
          'serviceId' => 'info:lanl-repo/svc/getMetadata',
          'metadataurl' => 'http://dl-img.home.nyu.edu/adore-djatoka?',
          )
        )
      ) 
    )
  );
}

/**
 * Implementation of hook_uninstall().
 */
 
function dlts_image_uninstall() { 
  variable_del('dlts_image_djatoka_service');
  variable_del('dlts_image_djatoka_metadataurl');
  variable_del('dlts_image_advanced_share');
  variable_del('dlts_image_djatoka_service_host');
  variable_del('dlts_image_djatoka_service_path');
  variable_del('dlts_image_djatoka_service_port');
  variable_del('dlts_image_djatoka_service_url');
  variable_del('dlts_image_openlayers');
  variable_del('dlts_image_openlayers_format');
  variable_del('dlts_image_openlayers_openurl');
  variable_del('dlts_image_openlayer_metadaurl_service');
  variable_del('dlts_image_openlayer_target');
}