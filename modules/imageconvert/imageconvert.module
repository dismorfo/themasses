<?php

/**
 * hook_image_effect_info()
 *
 * Return the descriptions for the supported actions.
 */
function imageconvert_image_effect_info() {
  // @todo Convert may need a little more work.
  $effects['imageconvert_convert'] = array(
    'label' => t('Change file format'),
    'help' => t('Choose to save the image as a different filetype.'),
    'effect callback' => 'imageconvert_convert_image',
    'form callback' => 'imageconvert_convert_form',
    'summary theme' => 'imageconvert_convert_summary',
  );
  return $effects;
}

/**
 * hook_theme()
 */
function imageconvert_theme() {
  return array(
    'imageconvert_convert_summary' => array(
      'variables' => array('data' => NULL),
    ),
  );
}

/**
 * Implementation of imagecache_hook_form()
 *
 * @param $action array of settings for this action
 * @return a form definition
 */
function imageconvert_convert_form($action) {
  if (image_get_toolkit() === 'imageapi_imagemagick') {
    drupal_set_message('When using imagemagick, convert format must be the last effect. If not, results will be unpredictable.', 'warning');
  }
  $form = array(
    'help' => array(
      '#type' => 'markup',
      '#value' => t("If you've been using transparencies in the process, the result may get saved as a PNG (as the image was treated as a one in in-between processes). If this is not desired (file sizes may get too big) you should use this process to force a flatten action before saving. "),
    ),
    'help2' => array(
      '#type' => 'markup',
      '#value' => t("For technical reasons, changing the file format within imagecache does <em>not</em> change the filename suffix. A png may be saved as a *.jpg or vice versa. This may confuse some browsers and image software, but most of them have no trouble. "),
    ),
    'format' => array(
      '#title' => t("File format"),
      '#type' => 'select',
      '#default_value' => isset($action['format']) ? $action['format'] : 'image/png',
      '#options' => imageconvert_file_formats(),
    ),
    'quality' => array(
      '#type' => 'textfield',
      '#title' => t('JPEG quality'),
      '#description' => t('Define the image quality for JPEG manipulations only. Ranges from 0 to 100. Higher values mean better image quality, but bigger files.<br /><strong>Has no effect if jpg is not selected.</strong>'),
      '#size' => 10,
      '#maxlength' => 3,
      '#default_value' => isset($action['quality']) ? $action['quality'] : '75',
      '#field_suffix' => '%',
    ),
  );
  return $form;
}

/**
 * Implementation of theme_hook() for imagecache_ui.module
 */
function theme_imageconvert_convert_summary($variables) {
  $data = $variables['data'];
  $formats = imageconvert_file_formats();
  if ($formats[$data['format']] == 'jpg') {
    return t('Convert to: @format, quality: @quality%', array(
    '@format' => $formats[$data['format']],
    '@quality' => $data['quality']
    ));
  }
  else {
    return t("Convert to") .": ". $formats[$data['format']];
  }
}

/**
 * Implementation of hook_image()
 *
 * Process the imagecache action on the passed image
 */
function imageconvert_convert_image($image, $data = array()) {
  $formats = imageconvert_file_formats();
  $image->info['mime_type'] = $data['format'];
  $image->info['extension'] = $formats[$data['format']];
  image_toolkit_invoke('convert_image', $image, $data);
  return TRUE;
}

/**
 * Implementation of hook_{toolkit}_{effect}()
 *
 * image_toolkit_invoke will exit with an error when no implementation is
 * provided for the active toolkit so provide an empty operation for the GD
 * tookit
 */
function image_gd_convert_image($image, $data = array()) {
  return TRUE;
}

/**
 * Implementation of hook_{toolkit}_{effect}()
 *
 */
function image_imagemagick_convert_image($image, $data = array()) {
  $image->ops['output_format'] = $image->info['extension'];
  return TRUE;
}

/**
 * Implements hook_imagemagick_arguments_alter.
 */
function imageconvert_imagemagick_arguments_alter(&$args, $context) {
  if (array_key_exists('output_format', $args)) {
    $context['destination_format'] = $args['output_format'];
    unset($args['output_format']);
  }
}

/**
 * Mini mime-type list
 */
function imageconvert_file_formats() {
  return array('image/jpeg' => 'jpg', 'image/gif' => 'gif', 'image/png' => 'png');
}
