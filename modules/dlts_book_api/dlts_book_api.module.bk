<?php

/**
 * Implements hook_custom_theme().
 * http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_custom_theme/7
 */
function dlts_book_api_custom_theme() {
  if ( isset( $_GET['oembed'] ) ) {
    return 'dlts_book_oembed';
  }
  else if ( isset($_GET['ctheme']) ) {
    return filter_xss($_GET['ctheme']);
  }
}

function dlts_book_api_permission() {
  return array(
    'request oembed' => array(
      'title' => t('Request oEmbed'),
      'description' => t('Allow http request to oEmbed resources.'),
    ),
    'request book metadata' => array(
      'title' => t('Allow request to book metadata'),
      'description' => t('Allow http request to books metadata.'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function dlts_book_api_theme() {
  return array(
    'dlts_book_api_oembed' => array(
      'arguments' => array(
        'url' => NULL,
        'width' => NULL,
        'height' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dlts_book_api_menu() {
  return array(

    /*
     * @TODO: Work out the author displaying.
     */
    'books/%dlts_book/metadata' => array(
      'title' => 'Book metadata',
      'access arguments' => array('request book metadata'),
      'page callback' => 'dlts_book_api_book_metadata',
      'page arguments' => array(1),
      'delivery callback' => 'dlts_utilities_deliver_json',
      'type' => MENU_CALLBACK,
    ),

    'books/%dlts_book/edit' => array(
      'title' => 'Edit book',
      'access arguments' => array('request book metadata'), // for now
      'page callback' => 'dlts_book_api_book_edit_redirect',
      'page arguments' => array(1),
    ),
    
    'books/%/%/edit' => array(
      'title' => 'Edit book page',
      'access arguments' => array('request book metadata'), // for now
      'page callback' => 'dlts_book_api_book_page_edit_redirect',
      'page arguments' => array(0, 1, 2),
    ),
    
    
    'books/%dlts_book/metadata.json' => array(
      'title' => 'Book metadata',
      'access arguments' => array('request book metadata'),
      'page callback' => 'dlts_book_api_book_metadata',
      'delivery callback' => 'dlts_utilities_deliver_json',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
    ),
    
    /*
     * @TODO: Allow start point and limit
     * We are not using this. For now will let it be and go back when the other parts are done.
     * books/catalogueraisonn00pass/metadata/pages
     */
    'books/%dlts_book/pages.json' => array(
      'title' => 'Book pages',
      'access arguments'   => array('request book metadata'),
      'page callback' => 'dlts_book_api_book_pages',
      'delivery callback' => 'dlts_utilities_deliver_json',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
    ),
    

    'books/%dlts_book/book.json' => array(
      'title' => 'Book pages',
      'access arguments' => array('request book metadata'),
      'page callback' => 'dlts_book_api_book',
      'delivery callback' => 'dlts_utilities_deliver_json',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
    ),
    
    'books.json' => array(
      'title' => 'Books',
      'access arguments' => array('request book metadata'),
      'page callback' => 'dlts_book_api_books',
      'delivery callback' => 'dlts_utilities_deliver_json',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
    ),
    
    /*
     * http://{url}/{site}/services/oembed?url=http://{url}/{site}/books/{identifier}
     * (This menu item is supporting ATLAS, but see below for future embed clients)
     */
    'services/oembed' => array(
      'title' => 'oEmbed',
      'access arguments'   => array('request oembed'),
      'page callback' => 'dlts_book_api_embed_using_uri',
      'delivery callback' => 'dlts_utilities_deliver_json',
      'type' => MENU_CALLBACK,
    ),
    /*
     * Options 2: RESTful style embed call
     * (This is probably preferred over the method above)
     */
     'books/%dlts_book/mode/embed' => array(
        'title' => 'Embed',
        'access arguments' => array('request oembed'),
        'page arguments' => array(1),
        'page callback' => 'dlts_book_api_embed_using_id',
        'delivery callback' => 'dlts_utilities_deliver_json',
    ),
  );
}

/**
 * A wildcard loader for dlts_book nodes, using the book identifier.
 *
 * @parameter $identifier
 *  The value of field_identifier for a dtls_book node.
 *
 * @return
 * A node object with the given value for field_identifier.
 *
 * @todo
 * field_identifier is supposed to be unique across all books, but we do
 * no checking of this assumption.
 * @todo
 * Does the query need to be tagged as node_access? We're checking node_access
 * via the menu system, but since the loader is called before access is
 * checked, adding a check here might save an entity_load if the user's not
 * going to have access anyway, at the cost of an extra JOIN here.
 */
function dlts_book_load($identifier) {
  $query = new EntityFieldQuery;
  
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'dlts_book')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_identifier', 'value', $identifier, '=')
    ->execute();

  if (!empty($result['node'])) {
    /** bjh6: wrapped array_pop() around this. See: http://stackoverflow.com/questions/4798047/array-flipcan-only-flip-string-and-integer-values-in-drupaldefaultentitycont */
    return node_load(array_pop(array_keys($result['node'])));
  } else {
    /** If the query returns no result, there's no book with the given identifier. */
    return filter_xss($identifier);
  }
}

function dlts_book_api_books($start = 0, $limit = 25) {
  global $language;

  $books = array(
    'books' => array()
  );
  
  if (isset($_GET['limit']) && is_numeric($_GET['limit'])) {
    $limit = $_GET['limit'];
  }
  
  $query = new EntityFieldQuery();

  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'dlts_book')
    ->propertyCondition('status', 1);
  
  if ($limit != 0) {
    $entities->range($from, $limit);
  }
    
  $que = $entities->execute();  
  $nodes = entity_load('node', array_keys($que['node']));
  foreach ((array) $nodes as $node) {
    
    $field_representative_image = dlts_utilities_field_get_first_item('node', $node, 'field_representative_image');
    $field_identifier = dlts_utilities_field_get_first_item('node', $node, 'field_identifier');
    $field_title = dlts_utilities_field_get_first_item('node', $node, 'field_title');
    $field_sequence_count = dlts_utilities_field_get_first_item('node', $node, 'field_sequence_count');
    $field_page_count = dlts_utilities_field_get_first_item('node', $node, 'field_page_count');
    $field_page_count = dlts_utilities_field_get_first_item('node', $node, 'field_page_count');
    $field_description = dlts_utilities_field_get_first_item('node', $node, 'field_description');
    $field_editor = dlts_utilities_field_get_first_item('node', $node, 'field_editor');
    $field_language = dlts_utilities_field_get_first_item('node', $node, 'field_language');
    $field_number = dlts_utilities_field_get_first_item('node', $node, 'field_number');
    $field_publisher = dlts_utilities_field_get_first_item('node', $node, 'field_publisher');
    $field_volume = dlts_utilities_field_get_first_item('node', $node, 'field_volume');
    $field_publication_date = dlts_utilities_field_get_first_item('node', $node, 'field_publication_date');
    
    $books['books'][] = array(
      'title' => $field_title['safe_value'],
      'sequences' => $field_sequence_count['value'],
      'identifier' => $field_identifier['safe_value'],
      'description' => $field_description['safe_value'],
      'editors' => $field_editor['safe_value'],
      'number' => $field_number['safe_value'],
      'publisher' => $field_publisher['safe_value'],
      'date' => format_date($field_publication_date['value'], 'medium', 'm, Y'),
      'volume' => $field_volume['safe_value'],
      'count' => $field_page_count['value'],    
      'language' => $field_language['safe_value'],
      'thumbnail' => array(
        'image' => image_style_url('medium', $field_representative_image['uri']),
        'width' => 220,
        'height' => 165
      ),
    );
  }  
  return $books;
}

/**
 * Generate metadata about the first five pages in a DLTS Book.
 *
 * @param $dlts_book
 * A DLTS Book node object.
 * @return
 * A keyed array to be converted into JSON.
 */
function dlts_book_api_book_pages($book, $start = 0, $length = 25) {
  global $language;

  $pages = array(
    'pages' => array()
  );

  if (!is_object($book) || !isset($book->nid)) {
    return MENU_NOT_FOUND;
  }
  
  $field = dlts_utilities_field_get_first_item('node', $book, 'field_identifier');
  
  if (!isset($field)) {
    return MENU_NOT_FOUND;
  }
  
  if (isset($_GET['limit']) && is_numeric($_GET['limit'])) {
    $length = $_GET['limit'];
  }

  if (isset($_GET['start']) && is_numeric($_GET['start'])) {
    $start = $_GET['start'];
  }
  
  $identifier = $field['safe_value'];

  $query = new EntityFieldQuery();

  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'dlts_book_page')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_is_part_of', 'value', $identifier, '=')
    ->fieldCondition('field_visible', 'value', 1, '=');
  
  if ($length != 0) {
    $entities->range($start, $length);
  }
    
  $que = $entities->execute();
    
  $nodes = entity_load('node', array_keys($que['node']));
  
  foreach ((array) $nodes as $node) {
    
    $service_image = dlts_utilities_field_get_first_item('node', $node, 'field_service_copy');
    $service_image_uri = file_create_url($service_image['uri']);
    $master = dlts_utilities_field_get_first_item('node', $node, 'field_cropped_master');
    $master_file = file_create_url($master['uri']);
    $field = dlts_utilities_field_get_first_item('node', $node, 'field_real_page_number');  
    $real_page_number = $field['safe_value'];    
    $field = dlts_utilities_field_get_first_item('node', $node, 'field_sequence_number');  
    $sequence_number = $field['value'];
    $pages['pages'][] = array(
      'title' => $node->title,
      'sequence' => $sequence_number,
      'page' => $real_page_number,
      'uri' => $master_file,
      'service' => $service_image_uri,
      'thumbnail' => array(
        'image' => image_style_url('medium', $service_image['uri']),
        'width' => 220,
        'height' => 165
      ),
      'metadata' => array(
        'width' => (isset($master['djakota_width']) ? $master['djakota_width'] : NULL ),
        'height' => (isset($master['djakota_height']) ? $master['djakota_height'] : NULL ),
        'levels' => (isset($master['djakota_levels']) ? $master['djakota_levels'] : NULL ),
        'dwtLevels' => (isset($master['djakota_dwtLevels']) ? $master['djakota_dwtLevels'] : NULL ),
        'compositingLayerCount' => (isset($master['djakota_compositingLayerCount']) ? $master['djakota_compositingLayerCount'] : NULL ),
      ),
    );
  }
  return $pages;
}

/** 
 * Supports the 'Services' style embed
 */
function dlts_book_api_embed_using_uri() {
  $lookup_results = dlts_book_api_oembed_lookup();
  if ( $lookup_results['code'] !== 200 ) {
    return $lookup_results;
  }
  $nid = $lookup_results['nid'];
  $bnode = node_load($nid);
  return dlts_book_api_embed_response( $bnode, $lookup_results );
}

/**
 * Supports the REST style embed
 */
function dlts_book_api_embed_using_id( $dlts_book ) {
  if ( is_object($dlts_book) ) {
    $bnode = $dlts_book;
  }
  else {
    return MENU_NOT_FOUND;
  }
  return dlts_book_api_embed_response( $bnode );
}

/**
 * Generate a response to a client oEmbed request.
 *
 * @return
 *   A keyed array to be converted into JSON
 *
 * @todo Test oembed_node for whether it's actually a node
 */
function dlts_book_api_embed_response( $dlts_book, $pre_response = array() ) {

  /*
   * Invoke the URL that was passed as if it was its own request.
   */
  $node = $dlts_book;

  if ( !$node ) {
    watchdog('dlts_book_api', 'An Unexpected Error Has Occurred. The given path: :path does not exist.', array(':path' => $pre_response['node_path']), WATCHDOG_ERROR);
    return array(
      'code' => MENU_NOT_FOUND,
      'msg' => t('An Unexpected Error Has Occurred. The given path does not exist.' ),
    );
  }

  switch ($node->type) {
    case 'dlts_book':
      $book = $node;
      break;

    case 'dlts_book_page':
    case 'dlts_book_stitched_page':
         $page = $node;

      /*
       * TODO: Fix assumption that all pages have a relationship with a book.
       */
      $field_book = field_get_items( 'node', $page, 'field_book' );
      $book = node_load($field_book[0]['nid']);
      break;
  }

  $argument_defaults = array(
    'format' => 'JSON',
    'width' => 480,
    'height' => 640,
    'callback' => '',
    'iframe' => TRUE,
    'mode' => 'single_page',
  );

  $arguments = array_merge($argument_defaults, $pre_response);

  /*
   * Get book title
   * field is required
   */

  $field_title = field_get_items( 'node', $book, 'field_title' );
  $title = $field_title[0]['safe_value'];

  /*
   * Get book creators
   * @TODO: fix this, same as metadata
   */

  $authors = array();
  $author  = '';

  foreach ( (array) field_get_items( 'node', $book, 'field_author' ) as $author) {
    if ( isset($author['safe_value']) ) {
      $authors[] = $author['safe_value'];
    }
  } if ( !empty( $authors ) ) {
    $author = implode(', ', $authors);
  } else {
    $author = t('undefined');
  }

  /*
   * Author URL is not part of our collections, for now 'undefined'.
   */
  $author_url = t('undefined');

  /*
   * Get book representitive image
   */

  $field_representitive_image = field_get_items( 'node', $book, 'field_representative_image' );
  $thumbnail_url = file_create_url( $field_representitive_image[0]['uri'] );


  if ( !empty($arguments['uri']['modified']) ) {
    $url = url( $arguments['uri']['modified'], array('query' => array ('oembed' => 'true'), 'absolute' => TRUE));
  } else {
    $url = url( $arguments['uri']['request'], array('query' => array ('oembed' => 'true')));
  }

  $response = array(
    'type' => 'rich',
    'version' => '1.0',
    'title' => $title,
    'author_name' => $author,
    'author_url' => $author_url,
    'provider_name' => t('NYU Digital Library Technology Services'),
    'provider_url' => t('http://dlib.nyu.edu/dlts/projects'),
    'cache_age' => 86400,
    'thumbnail_url' => $thumbnail_url,
    'thumbnail_width' => 100,
    'thumbnail_height' => 154,
    'width' => (int) $arguments['width'],
    'height' => (int) $arguments['height'],
  );

  if ( $arguments['iframe'] ) {
    $response['html'] = theme('dlts_book_api_oembed', array(
      'url' => $url,
      'width' => $arguments['width'],
      'height' => $arguments['height'],
    ));
  }
  return $response;
}

function dlts_book_api_book($book) {
  $metadata = dlts_book_api_book_metadata($book);
  $pages = dlts_book_api_book_pages($book);
  return array_merge((array) $metadata, (array) $pages);
}

/**
 * Generate metadata about a book.
 *
 * @param $dlts_book
 * A dlts_book node object
 * @return
 * A keyed array to be converted into JSON
 *
 * @todo
 * Rather than hardcoding everything, I suspect it would be better to define a
 * build mode for book metadata and theming it. This is complicated by the
 * fact that many of the keys in the $response, below, don't correlate exactly
 * to Drupal field names. e.g. 'field_creator' versus 'author'
 */
function dlts_book_api_book_metadata($book) {

  if (!is_object($book)) {
    // fix this
    return array(
      'argument' => $book,
      'code' => 1,
      'message' => t('Invalid book'),
      'status' =>t('fail'),
    );
  }
  
  $base_url = url('', array('absolute' => TRUE));
  $metadata = array();
  
  foreach ($book as $key => $value) {
  
    if (!empty($value)) {
      preg_match('/^field_(.*)$/', $key, $matches);
      if ($matches) {
        $values = field_get_items('node', $book, $matches[0]);        
        foreach ($values as $field) {
          if (isset($field['safe_value'])) {
            $metadata[$matches[1]][] = array(
              'label' => $matches[1],
              'value' => $field['safe_value'],
              'visible' => TRUE,
            );
          }
          else if (isset($field['value'])) {
            $metadata[$matches[1]][] = array(
              'label' => $matches[1],
              'value' => $field['value'],
              'visible' => TRUE,
            );          
          }
          else if (isset($field['fid'])) {
            $value = '';
            if ( $field['filemime'] == 'image/jpeg' ) {
              $value = image_style_url('dlts-book-image', $field['uri']);
            }
            else {
              $value = file_create_url($field['uri']);
            }
          
            $metadata[$matches[1]][] = array(
              'label' => $field['filename'],
              'value' => $value,
              'visible' => TRUE,
            );              

          }          
          else if (isset($field['url']) && isset($field['title'])) {
            $metadata[$matches[1]][] = array(
              'label' => $field['title'],
              'value' => $field['url'],
              'visible' => TRUE,
            );
          }
          else if (isset($field['tid'])) {}
        }        
      }
    }
  }
  
  $identifier = NULL;
  
  // if identifier, set it as part of the body
  if (isset($metadata['identifier'])) {
    $identifier = $metadata['identifier'][0]['value'];
    unset($metadata['identifier']);
  }

  return array(
    'title' => !empty($title) ? $title : $book->title,
    'identifier' => $identifier,
    'book_path' => url('books/' . $identifier, array('absolute' => TRUE)),
    'base_url' => url('', array('absolute' => TRUE)),
    'metadata' => $metadata,
  );

}

/*
 * Themes functions
 */

function theme_dlts_book_api_oembed( $arguments ) {
  return '<iframe id="book-viewer" src="' . $arguments['url'] .'" width="' . $arguments['width'] .'" height="' . $arguments['height'] .'"><p>' . t('Your browser does not support iframes.') . '</p></iframe>';
}

function dlts_book_sequence_path($sequence, $type) {
  if ($nid = dlts_book_sequence_lookup($sequence, $type)) {
    return array(
      'nid' => $nid,
      'node_path' => drupal_lookup_path( 'alias', 'node/' . $nid ),
    );
  }
  return FALSE;
}

function dlts_book_sequence_lookup($sequence, $type) {
  $sequences = preg_split('/-/', $sequence);

  if ( isset($sequences[0]) && !empty($sequences[0]) ) {
    $sequence = (int) $sequences[0];
  } else {
    watchdog('dlts_book_api', 'Bad Request: Error finding book by sequence page.');
    return $sequence;
  }

  $types = array('dlts_book_page', 'dlts_book_stitched_page');

  if ( in_array( $type, $types ) ) {
    $query = "
      SELECT n.nid
        FROM {node} n
        LEFT JOIN {field_data_field_sequence_number_left} l ON n.nid = l.entity_id
        LEFT JOIN {field_data_field_sequence_number_right} r ON n.nid = r.entity_id
        WHERE n.status = :status
        AND n.type = :type
        AND ( l.field_sequence_number_left_value = :sequence OR r.field_sequence_number_right_value = :sequence )
        LIMIT 1";

    $result =  db_query($query, array(':status' => 1, ':type' => $type, ':sequence' => $sequence ));

    /*
     * We just need the first one
     * Look for a better way to do this
     */
    foreach ($result as $record) {
      return $record->nid;
    }
  }
}

function dlts_book_api_oembed_lookup() {
  global $base_url;
  $request_uri = drupal_parse_url(request_uri());
  $modified = FALSE;

  if ( array_key_exists('url', $request_uri['query']) && valid_url($request_uri['query']['url'], TRUE) ) {
    $host = parse_url( $base_url );
    $oembed = parse_url($request_uri['query']['url']);
    $path = '';

    /*
     * Don't look in DB if the requested URL does not match a valid oembed request
     */
    if ( $oembed['host'] != $host['host'] ) {
      watchdog('dlts_book_api', 'Bad Request: Client has issued a illegal request. URL requested is not part of this collection.');
      return array(
        'msg' => t('Bad Request: Client has issued a illegal request. URL requested is not part of this collection.'),
        'code' => 403,
      );
    }

    /*
     * Match legal request books/%identifier/%page
     * TODO: refacto
     */

    if ( preg_match( '/\/books\/(\w+)\/([\-0-9]+)\/?$/', $request_uri['query']['url'], $matches ) || preg_match( '/\/books\/(\w+)\/?$/', $request_uri['query']['url'], $matches ) ) {

      /*
       * Double page request
       */

      if ( array_key_exists('mode', $request_uri['query']) && $request_uri['query']['mode'] == 'double_page' ) {
        if ( $sequence_path = dlts_book_sequence_path( $matches[2], 'dlts_book_stitched_page') ) {
          $modified = TRUE;
          $path = $sequence_path['node_path'];
          $nid = $sequence_path['nid'];
        }
      }

      /*
       * Single page request
       */

      else {
        $path = drupal_lookup_path( 'source', 'books/' . $matches[1] . ( isset( $matches[2] ) ? '/' . $matches[2] : '' ) );
        $nid = preg_replace( array('/\D/'), '', $path);
      }

      if (!empty($path) ) {
        $response = array(
          'msg' => 'ok',
          'code' => 200,
          'nid' => $nid,
          'node_path' => $path,
          'uri' => array(
            'request' => $request_uri['query']['url'],
            'modified' => FALSE,
          )
        );
        if ( $modified ) {
          $response['uri']['modified'] = $path;
        }
      }
      else {
        watchdog('dlts_book_api', 'Bad Request: Client has issued an illegal request.');
        $response = array(
          'msg' => t('Bad Request: Client has issued an illegal request.'),
          'code' => 403,
        );
      }

    }

    /*
     * Request does not conform books URL structure
     */

    else {
      watchdog('dlts_book_api', 'Bad Request: Client has issued a malformed or illegal request.');
      $response = array(
        'msg' => t('Bad Request: Request does not conform books URL structure.'),
        'code' => 403,
      );
    }
  }

  /*
   * User request does not include URL
   */

  else {
    watchdog('dlts_book_api', 'Bad Request: Client has issued a malformed request. Please make sure the request include the URL parameter.');
    $response = array(
      'msg' => t('Bad Request: Client has issued a malformed request. Please make sure the request include the URL parameter.'),
      'code' => 400,
    );
  }
  return $response;
}

function dlts_book_api_book_edit_redirect($arg1) {
  drupal_goto('node/' . $arg1->nid . '/edit');
}

function dlts_book_api_book_page_edit_redirect($arg1, $arg2, $arg3) {
  $path = drupal_lookup_path('source', $arg1 . '/' . $arg2 . '/' . $arg3);
  drupal_goto($path . '/edit');
}
  